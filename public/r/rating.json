{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating",
  "type": "registry:component",
  "title": "Rating",
  "description": "A customizable rating component",
  "files": [
    {
      "path": "registry/new-york/rating/components/rating.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface RatingProps {\n  value?: number;\n  onChange?: (value: number) => void;\n  max?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  readonly?: boolean;\n  className?: string;\n}\n\nconst Rating = React.forwardRef<HTMLDivElement, RatingProps>(\n  (\n    {\n      value = 0,\n      onChange,\n      max = 5,\n      size = \"md\",\n      readonly = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const [hoverValue, setHoverValue] = React.useState<number | null>(null);\n\n    const sizeClasses = {\n      sm: \"h-4 w-4\",\n      md: \"h-5 w-5\",\n      lg: \"h-6 w-6\",\n    };\n\n    const handleClick = (rating: number) => {\n      if (!readonly && onChange) {\n        onChange(rating);\n      }\n    };\n\n    const handleMouseEnter = (rating: number) => {\n      if (!readonly) {\n        setHoverValue(rating);\n      }\n    };\n\n    const handleMouseLeave = () => {\n      if (!readonly) {\n        setHoverValue(null);\n      }\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center gap-1\",\n          !readonly && \"cursor-pointer\",\n          className,\n        )}\n        {...props}\n      >\n        {Array.from({ length: max }, (_, index) => {\n          const rating = index + 1;\n          const isFilled = (hoverValue ?? value) >= rating;\n\n          return (\n            <button\n              key={`star-${rating}`}\n              type=\"button\"\n              className={cn(\n                \"focus:ring-ring transition-colors focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:cursor-default\",\n                sizeClasses[size],\n                !readonly && \"transition-transform hover:scale-110\",\n              )}\n              onClick={() => handleClick(rating)}\n              onMouseEnter={() => handleMouseEnter(rating)}\n              onMouseLeave={handleMouseLeave}\n              disabled={readonly}\n              aria-label={`Rate ${rating} out of ${max} stars`}\n            >\n              <svg\n                className={cn(\n                  \"h-full w-full transition-colors\",\n                  isFilled\n                    ? \"fill-yellow-400 text-yellow-400\"\n                    : \"fill-muted stroke-muted-foreground\",\n                )}\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1}\n                aria-hidden=\"true\"\n              >\n                <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\" />\n              </svg>\n            </button>\n          );\n        })}\n      </div>\n    );\n  },\n);\n\nRating.displayName = \"Rating\";\n\nexport { Rating };\n",
      "type": "registry:ui"
    }
  ]
}