{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating",
  "type": "registry:component",
  "title": "Rating",
  "description": "A customizable rating component",
  "files": [
    {
      "path": "registry/new-york/rating/components/rating.tsx",
      "content": "\"use client\";\n\nimport { Star } from \"lucide-react\";\nimport { useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport type RatingProps = {\n  value?: number;\n  /**\n   * The maximum value of the rating\n   *\n   * @default 5\n   */\n  max?: number;\n  hasHalves?: boolean;\n  readOnly?: boolean;\n  className?: string;\n  onChange?: (value: number) => void;\n};\n\nexport function Rating({\n  max = 5,\n  hasHalves,\n  value,\n  readOnly,\n  className,\n  onChange,\n}: RatingProps) {\n  const [hoverValue, setHoverValue] = useState<number>(value ?? 0);\n\n  const roundedStars = Math.ceil(max);\n  const Comp = readOnly ? \"div\" : \"button\";\n\n  const handleClick = (value: number) => {\n    if (readOnly) {\n      return;\n    }\n\n    onChange?.(value);\n  };\n\n  const handleMouseEnter = (value: number) => {\n    if (readOnly) {\n      return;\n    }\n    setHoverValue(value);\n  };\n\n  const handleMouseLeave = () => {\n    if (readOnly) {\n      return;\n    }\n    setHoverValue(value ?? 0);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"text-primary flex flex-nowrap\",\n        \"[&_[data-slot='star']]:px-0.5\",\n        \"[&_svg]:size-6\",\n        \"[&_[data-active='true']]:fill-current\",\n        !readOnly && \"[&_[data-slot='star']]:cursor-pointer\",\n        className,\n      )}\n    >\n      {Array.from({ length: roundedStars }).map((_, index) => {\n        const starValue = index + 1;\n\n        return (\n          <div key={starValue} className=\"relative\">\n            {hasHalves && (\n              <Comp\n                data-slot=\"star\"\n                type=\"button\"\n                className=\"absolute z-10\"\n                style={{ clipPath: \"inset(0 50% 0 0)\" }}\n                onClick={() => {\n                  if (readOnly) {\n                    return;\n                  }\n                  handleClick(starValue - 0.5);\n                }}\n                onMouseEnter={() => handleMouseEnter(starValue - 0.5)}\n                onMouseLeave={() => handleMouseLeave()}\n              >\n                <Star\n                  data-active={hoverValue >= starValue - 0.5}\n                  className={cn(\n                    \"fill-background stroke-current transition-colors\",\n                  )}\n                />\n              </Comp>\n            )}\n            <Comp\n              data-slot=\"star\"\n              type=\"button\"\n              onClick={() => handleClick(starValue)}\n              onMouseEnter={() => handleMouseEnter(starValue)}\n              onMouseLeave={() => handleMouseLeave()}\n            >\n              <Star\n                data-active={hoverValue >= starValue}\n                className={cn(\n                  \"fill-background stroke-current transition-colors\",\n                )}\n              />\n            </Comp>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}